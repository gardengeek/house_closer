require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe LeadsController do

  def mock_lead(stubs={})
    @mock_lead ||= mock_model(Lead, stubs).as_null_object
  end

  def mock_contact(stubs={})
    @mock_contact ||= mock_model(Contact, stubs).as_null_object
  end

  before(:each) do
    controller.stub!(:current_user).and_return(Factory.build(:admin_user))
  end

  describe "GET index" do
    it "assigns all leads as @leads" do
      @leads = [mock_lead]
      Lead.should_receive(:scoped).with() { @leads }
      @leads.should_receive(:where).with() { @leads }
      @leads.should_receive(:joins).with() { @leads }
      get :index
      assigns(:leads).should eq([mock_lead])
    end
  end

  describe "GET show" do
    it "assigns the requested lead as @lead" do
      @mock_lead = mock_lead(:contact_id => "42")
      Lead.stub(:find).with("37") { @mock_lead }
      Contact.stub(:find).with(@mock_lead.contact_id) { mock_contact }
      get :show, :id => "37"
      assigns(:lead).should be(mock_lead)
      assigns(:contact).should be(mock_contact)
    end
  end

  describe "GET new" do
    it "assigns a new lead as @lead" do
      Lead.stub(:new) { mock_lead }
      get :new
      assigns(:lead).should be(mock_lead)
    end
  end

  describe "GET edit" do
    it "assigns the requested lead as @lead" do
      Lead.stub(:find).with("37") { mock_lead }
      get :edit, :id => "37"
      assigns(:lead).should be(mock_lead)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created lead as @lead" do
        Lead.stub(:new).with({'these' => 'params'}) { mock_lead(:save => true) }
        post :create, :lead => {'these' => 'params'}
        assigns(:lead).should be(mock_lead)
      end

      it "redirects to the created lead" do
        Lead.stub(:new) { mock_lead(:save => true) }
        post :create, :lead => {}
        response.should redirect_to(lead_url(mock_lead))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved lead as @lead" do
        Lead.stub(:new).with({'these' => 'params'}) { mock_lead(:save => false) }
        post :create, :lead => {'these' => 'params'}
        assigns(:lead).should be(mock_lead)
      end

      it "re-renders the 'new' template" do
        Lead.stub(:new) { mock_lead(:save => false) }
        Contact.stub(:new) { mock_contact }
        post :create, :lead => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested lead" do
        Lead.stub(:find).with("37") { mock_lead }
        mock_lead.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :lead => {'these' => 'params'}
      end

      it "assigns the requested lead as @lead" do
        Lead.stub(:find) { mock_lead(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:lead).should be(mock_lead)
      end

      it "redirects to the lead" do
        Lead.stub(:find) { mock_lead(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(lead_url(mock_lead))
      end
    end

    describe "with invalid params" do
      it "assigns the lead as @lead" do
        Lead.stub(:find) { mock_lead(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:lead).should be(mock_lead)
      end

      it "re-renders the 'edit' template" do
        Lead.stub(:find) { mock_lead(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested lead" do
      Lead.stub(:find).with("37") { mock_lead }
      mock_lead.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the leads list" do
      Lead.stub(:find) { mock_lead }
      delete :destroy, :id => "1"
      response.should redirect_to(leads_url)
    end
  end

end
